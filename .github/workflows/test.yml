name: Test and Release

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main
      - test

env:
  BINARY_APP_NAME: pact_cli
jobs:
  build:
    name: '🛠️ Build binaries'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-apple-darwin, os: macos-14, use-cross: false }
          - { target: aarch64-apple-darwin, os: macos-14, use-cross: false }
          # - {
          #     target: x86_64-unknown-linux-gnu,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: x86_64-unknown-linux-musl,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: aarch64-unknown-linux-gnu,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: aarch64-unknown-linux-musl,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabihf,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: arm-unknown-linux-musleabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: arm-unknown-linux-musleabihf,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv7-unknown-linux-gnueabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv7-unknown-linux-gnueabihf,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv7-unknown-linux-musleabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv7-unknown-linux-musleabihf,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }


          # # Fails to build when Ring is included
          # # https://github.com/briansmith/ring/issues/1303
          # # - {
          # #     target: i586-unknown-linux-gnu,
          # #     os: ubuntu-latest,
          # #     use-cross: true
          # #   }


          # - {
          #     target: i686-unknown-linux-gnu,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }

          # # awaiting pr's for bsd targets
          # # https://github.com/stanislav-tkach/os_info/issues/370
          # - {
          #     target: x86_64-unknown-netbsd,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: x86_64-unknown-freebsd,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: aarch64-unknown-freebsd,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }

          # - {
          #     target: armv5te-unknown-linux-gnueabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv5te-unknown-linux-musleabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: arm-linux-androideabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: armv7-linux-androideabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: aarch64-linux-android,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - { target: i686-linux-android, os: ubuntu-latest, use-cross: true }
          # - { target: x86_64-linux-android, os: ubuntu-latest, use-cross: true }
          # - {
          #     target: thumbv7neon-linux-androideabi,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: thumbv7neon-unknown-linux-gnueabihf,
          #     os: ubuntu-latest,
          #     use-cross: true
          #   }
          # - {
          #     target: x86_64-pc-windows-msvc,
          #     os: windows-latest,
          #     use-cross: false
          #   }
          # - {
          #     target: aarch64-pc-windows-msvc,
          #     os: windows-latest,
          #     use-cross: false
          #   }
          - {
              target: i686-pc-windows-msvc,
              os: windows-latest,
              use-cross: false
            }
          - {
              target: x86_64-pc-windows-gnu,
              os: windows-latest,
              use-cross: false
            }
    runs-on: ${{matrix.job.os}}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust Toolchain Components
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.job.target }}
          toolchain: stable
        if: ${{ matrix.job.target != 'aarch64-unknown-freebsd'}}
      - name: Install Rust Toolchain Components
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-unknown-linux-gnu
          toolchain: nightly
        if: ${{ matrix.job.target == 'aarch64-unknown-freebsd'}}
      - name: set MACOSX_DEPLOYMENT_TARGET to 10.9 for x86_64-apple-darwin (mavericks)
        if: ${{ matrix.job.target == 'x86_64-apple-darwin' }}
        run: echo "MACOSX_DEPLOYMENT_TARGET=10.9" >> $GITHUB_ENV
      - name: set MACOSX_DEPLOYMENT_TARGET to 11.0 for aarch64-apple-darwin (big sur)
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
      - name: Build with cargo
        if: ${{ matrix.job.use-cross == true }}
        run: make cargo_build_release TARGET=${{ matrix.job.target }} SLIM=true
      - name: Build with cargo
        if: ${{ matrix.job.use-cross != true }}
        run: |
          rustup toolchain install nightly ${{ matrix.job.target }};
          rustup component add rust-src --toolchain nightly --target=${{ matrix.job.target }};
          cargo +nightly install cross --git https://github.com/cross-rs/cross;
          RUSTFLAGS="-Zlocation-detail=none" cargo +nightly build -Z build-std=std,panic_abort,core,alloc,proc_macro -Z build-std-features=panic_immediate_abort --target=${{ matrix.job.target }} --release
      # - name: Build with cargo
      #   if: ${{ matrix.job.use-cross != true }}
      #   run: cargo build --bin ${{ env.BINARY_APP_NAME }} --release --target=${{ matrix.job.target }}

      #   # https://github.com/cross-rs/cross/issues/1345 x86_64-unknown-netbsd
      #   # https://github.com/cross-rs/cross/issues/1453 x86_64-pc-windows-gnu
      #   # https://github.com/cross-rs/cross/issues/1217 android
      # - name: Build with cross
      #   if: ${{ matrix.job.use-cross == true }}
      #   run: |
      #     if [[ ${{ matrix.job.target }} == *"android"* ]] || [[ ${{ matrix.job.target }} == "x86_64-unknown-netbsd" ]] || [[ ${{ matrix.job.target }} == "x86_64-pc-windows-gnu" ]] || [[ ${{ matrix.job.target }} == "x86_64-unknown-freebsd" ]]; then
      #       echo "installing latest cross"
      #       cargo install cross --git https://github.com/cross-rs/cross
      #     else
      #       cargo install cross@0.2.5
      #     fi
      #     if [[ ${{ matrix.job.target }} == "aarch64-unknown-freebsd" ]]; then
      #       echo "building with cargo nightly, plus std and core for aarch64-unknown-freebsd"
      #       sudo apt install libstd-rust-dev
      #       cargo +nightly install cross --git https://github.com/cross-rs/cross
      #       cross +nightly build -Z build-std=std,core,alloc,proc_macro --bin ${{ env.BINARY_APP_NAME }} --profile release-aarch64-freebsd --target=${{ matrix.job.target }}
      #       mv target/aarch64-unknown-freebsd/release-aarch64-freebsd target/aarch64-unknown-freebsd/release
      #     else
      #       cross build --bin ${{ env.BINARY_APP_NAME }} --release --target=${{ matrix.job.target }}
      #     fi

      # - name: Test
      #   if: ${{ matrix.job.use-cross != true }}
      #   run: cargo test --release
      - name: Create dist
        id: dist
        shell: bash
        run: ./prep_dist.sh ${{ matrix.job.target }}
      # - name: Create dist
      #   id: dist
      #   shell: bash
      #   run: |
      #     EXECUTABLE="target/${{ matrix.job.target }}/release/${{ env.BINARY_APP_NAME }}"
      #     BINARY_NAME="${{ env.BINARY_APP_NAME }}_${{ matrix.job.target }}"
      #     BINARY_NAME=${BINARY_NAME//-unknown-/-}
      #     BINARY_NAME=${BINARY_NAME//-pc-/-}
      #     BINARY_NAME=${BINARY_NAME//-apple-darwin/-macos}
      #     BINARY_PATH="dist/${BINARY_NAME}"
      #     mkdir -p "dist/"
      #     # Binary
      #     cp "${EXECUTABLE}" "${BINARY_PATH}"
      #     echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_OUTPUT
      #     echo "BINARY_PATH=${BINARY_PATH}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@master
        with:
          name: ${{ steps.dist.outputs.BINARY_NAME }}
          path: dist/
      - name: Publish archives and packages
        uses: softprops/action-gh-release@master
        with:
          tag_name: 'v0.0.5'
          name: 'Release v0.0.5'
          generate_release_notes: false
          body: 'Release v0.0.5'
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # release:
  #   name: '📦 Github release'
  #   if: |
  #     github.ref == 'refs/heads/main'
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     discussions: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@master
  #     - name: Publish archives and packages
  #       uses: softprops/action-gh-release@master
  #       with:
  #         tag_name: 'v0.0.0'
  #         name: 'Release v0.0.0'
  #         generate_release_notes: false
  #         body: 'Release v0.0.0'
  #         files: |
  #           */${{ env.BINARY_APP_NAME }}*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
