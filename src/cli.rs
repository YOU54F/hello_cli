// use clap::{Arg, ArgAction, Command, Parser, Subcommand, ValueEnum};
use clap::{Arg, Command};

pub fn build_cli() -> Command {
    Command::new("pact_cli")
        .about("A pact cli tool")
        .subcommand(Command::new("pact-broker")
            .subcommand(Command::new("publish")
                .about("Publishes pacts to the Pact Broker")
                .arg(Arg::new("PACT_DIRS_OR_FILES")
                    .num_args(0..=1)
                    .required(true)
                    .help("Pact directories or files"))
                .arg(Arg::new("consumer-app-version")
                    .short('a')
                    .long("consumer-app-version")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .help("The consumer application version"))
                .arg(Arg::new("branch")
                    .short('h')
                    .long("branch")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .help("Repository branch of the consumer version"))
                .arg(Arg::new("auto-detect-version-properties")
                    .short('r')
                    .long("auto-detect-version-properties")
                    .num_args(0)
                    .help("Automatically detect the repository commit, branch and build URL from known CI environment variables or git CLI. Supports Buildkite, Circle CI, Travis CI, GitHub Actions, Jenkins, Hudson, AppVeyor, GitLab, CodeShip, Bitbucket and Azure DevOps."))
                .arg(Arg::new("tag")
                    .short('t')
                    .long("tag")
                    .num_args(0..=1)
                    .help("Tag name for consumer version. Can be specified multiple times."))
                .arg(Arg::new("tag-with-git-branch")
                    .short('g')
                    .long("tag-with-git-branch")
                    .num_args(0)
                    .help("Tag consumer version with the name of the current git branch. Supports Buildkite, Circle CI, Travis CI, GitHub Actions, Jenkins, Hudson, AppVeyor, GitLab, CodeShip, Bitbucket and Azure DevOps."))
                .arg(Arg::new("build-url")
                    .long("build-url")
                    .num_args(1)
                    .help("The build URL that created the pact"))
                .arg(Arg::new("merge")
                    .long("merge")
                    .num_args(0)
                    .help("If a pact already exists for this consumer version and provider, merge the contents. Useful when running Pact tests concurrently on different build nodes."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .num_args(1)
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .help("json or text"))
                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .num_args(0)
                    .help("Verbose output."))
                )
            .subcommand(Command::new("list-latest-pact-versions")
                .about("List the latest pact for each integration")

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "table"]))
                    .default_value("table")
                    .help("json or table")))
            .subcommand(Command::new("create-environment")
                .about("Create an environment resource in the Pact Broker to represent a real world deployment or release environment")
                .arg(Arg::new("name")
                    .long("name")
                    .value_name("NAME")
                    .required(true)
                    .help("The uniquely identifying name of the environment as used in deployment code"))
                .arg(Arg::new("display-name")
                    .long("display-name")
                    .value_name("DISPLAY_NAME")
                    .help("The display name of the environment"))
                .arg(Arg::new("production")
                    .long("production")
                    .help("Whether or not this environment is a production environment. This is currently informational only."))
                .arg(Arg::new("contact-name")
                    .long("contact-name")
                    .value_name("CONTACT_NAME")
                    .help("The name of the team/person responsible for this environment"))
                .arg(Arg::new("contact-email-address")
                    .long("contact-email-address")
                    .value_name("CONTACT_EMAIL_ADDRESS")
                    .help("The email address of the team/person responsible for this environment"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("update-environment")
                .about("Update an environment resource in the Pact Broker")
                .arg(Arg::new("uuid")
                    .long("uuid")
                    .value_name("UUID")
                    .required(true)
                    .help("The UUID of the environment to update"))
                .arg(Arg::new("name")
                    .long("name")
                    .value_name("NAME")
                    .help("The uniquely identifying name of the environment as used in deployment code"))
                .arg(Arg::new("display-name")
                    .long("display-name")
                    .value_name("DISPLAY_NAME")
                    .help("The display name of the environment"))
                .arg(Arg::new("production")
                    .long("production")
                    .help("Whether or not this environment is a production environment. This is currently informational only."))
                .arg(Arg::new("contact-name")
                    .long("contact-name")
                    .value_name("CONTACT_NAME")
                    .help("The name of the team/person responsible for this environment"))
                .arg(Arg::new("contact-email-address")
                    .long("contact-email-address")
                    .value_name("CONTACT_EMAIL_ADDRESS")
                    .help("The email address of the team/person responsible for this environment"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("describe-environment")
                .about("Describe an environment")
                .arg(Arg::new("uuid")
                    .long("uuid")
                    .value_name("UUID")
                    .required(true)
                    .help("The UUID of the environment to describe"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("delete-environment")
                .about("Delete an environment")
                .arg(Arg::new("uuid")
                    .long("uuid")
                    .value_name("UUID")
                    .required(true)
                    .help("The UUID of the environment to delete"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("list-environments")
                .about("List environments")
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("record-deployment")
                .about("Record deployment of a pacticipant version to an environment")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .help("The name of the pacticipant that was deployed"))
                .arg(Arg::new("version")
                    .short('e')
                    .long("version")
                    .value_name("VERSION")
                    .required(true)
                    .help("The pacticipant version number that was deployed"))
                .arg(Arg::new("environment")
                    .long("environment")
                    .value_name("ENVIRONMENT")
                    .required(true)
                    .help("The name of the environment that the pacticipant version was deployed to"))
                .arg(Arg::new("application-instance")
                    .long("application-instance")
                    .value_name("APPLICATION_INSTANCE")
                    .help("Optional. The application instance to which the deployment has occurred - a logical identifer required to differentiate deployments when there are multiple instances of the same application in an environment. This field was called 'target' in a beta release"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("record-undeployment")
                .about("Record undeployment of a pacticipant version from an environment")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .help("The name of the pacticipant that was undeployed"))
                .arg(Arg::new("environment")
                    .long("environment")
                    .value_name("ENVIRONMENT")
                    .required(true)
                    .help("The name of the environment that the pacticipant version was undeployed from"))
                .arg(Arg::new("application-instance")
                    .long("application-instance")
                    .value_name("APPLICATION_INSTANCE")
                    .help("Optional. The application instance from which the application is being undeployed - a logical identifer required to differentiate deployments when there are multiple instances of the same application in an environment. This field was called 'target' in a beta release"))
                .arg(Arg::new("target")
                    .long("target")
                    .value_name("TARGET")
                    .help("Optional. The target that the application is being undeployed from - a logical identifer required to differentiate deployments when there are multiple instances of the same application in an environment"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("delete-environment")
                .about("Delete an environment")
                .arg(Arg::new("uuid")
                    .long("uuid")
                    .value_name("UUID")
                    .required(true)
                    .help("The UUID of the environment to delete"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("list-environments")
                .about("List environments")
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("record-release")
                .about("Record release of a pacticipant version to an environment.")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .help("The name of the pacticipant that was released."))
                .arg(Arg::new("version")
                    .short('e')
                    .long("version")
                    .value_name("VERSION")
                    .required(true)
                    .help("The pacticipant version number that was released."))
                .arg(Arg::new("environment")
                    .long("environment")
                    .value_name("ENVIRONMENT")
                    .required(true)
                    .help("The name of the environment that the pacticipant version was released to."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("record-support-ended")
                .about("Record the end of support for a pacticipant version in an environment.")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .help("The name of the pacticipant."))
                .arg(Arg::new("version")
                    .short('e')
                    .long("version")
                    .value_name("VERSION")
                    .required(true)
                    .help("The pacticipant version number for which support is ended."))
                .arg(Arg::new("environment")
                    .long("environment")
                    .value_name("ENVIRONMENT")
                    .required(true)
                    .help("The name of the environment in which the support is ended."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))

                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .value_name("BROKER_USERNAME")
                    .help("Pact Broker basic auth username"))
                .arg(Arg::new("broker-password")
                            .short('p')
                            .long("broker-password")
                            .value_name("BROKER_PASSWORD")
                            .help("Pact Broker basic auth password"))
                        .arg(Arg::new("broker-token")
                            .short('k')
                            .long("broker-token")
                            .value_name("BROKER_TOKEN")
                            .help("Pact Broker bearer token"))
                        .arg(Arg::new("verbose")
                            .short('v')
                            .long("verbose")
                            .help("Verbose output.")))
            .subcommand(Command::new("can-i-deploy")
                .about("Check if a pacticipant can be deployed.")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .num_args(0..=1)
                    .help("The pacticipant name. Use once for each pacticipant being checked."))
                .arg(Arg::new("version")
                    .short('e')
                    .long("version")
                    .value_name("VERSION")
                    .help("The pacticipant version. Must be entered after the --pacticipant that it relates to."))
                .arg(Arg::new("ignore")
                    .long("ignore")
                    .value_name("PACTICIPANT")
                    .num_args(0..=1)
                    .help("The pacticipant name to ignore. Use once for each pacticipant being ignored. A specific version can be ignored by also specifying a --version after the pacticipant name option. The environment variable PACT_BROKER_CAN_I_DEPLOY_IGNORE may also be used to specify a pacticipant name to ignore, with commas to separate multiple pacticipant names if necessary."))
                .arg(Arg::new("latest")
                    .short('l')
                    .long("latest")
                    .value_name("TAG")
                    .help("Use the latest pacticipant version. Optionally specify a TAG to use the latest version with the specified tag."))
                .arg(Arg::new("branch")
                    .long("branch")
                    .value_name("BRANCH")
                    .help("The branch of the version for which you want to check the verification results."))
                .arg(Arg::new("main-branch")
                    .long("main-branch")
                    .help("Use the latest version of the configured main branch of the pacticipant as the version for which you want to check the verification results"))
                .arg(Arg::new("to-environment")
                    .long("to-environment")
                    .value_name("ENVIRONMENT")
                    .help("The environment into which the pacticipant(s) are to be deployed"))
                .arg(Arg::new("to")
                    .long("to")
                    .value_name("TAG")
                    .help("The tag that represents the branch or environment of the integrated applications for which you want to check the verification result status."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "table"]))
                    .default_value("table")
                    .help("json or table"))
                .arg(Arg::new("retry-while-unknown")
                    .long("retry-while-unknown")
                    .value_name("TIMES")
                    .help("The number of times to retry while there is an unknown verification result (ie. the provider verification is likely still running)"))
                .arg(Arg::new("retry-interval")
                    .long("retry-interval")
                    .value_name("SECONDS")
                    .help("The time between retries in seconds. Use in conjuction with --retry-while-unknown"))
                .arg(Arg::new("dry-run")
                    .long("dry-run")
                    .help("When dry-run is enabled, always exit process with a success code. Can also be enabled by setting the environment variable PACT_BROKER_CAN_I_DEPLOY_DRY_RUN=true. This mode is useful when setting up your CI/CD pipeline for the first time, or in a 'break glass' situation where you need to knowingly deploy what Pact considers a breaking change. For the second scenario, it is recommended to use the environment variable and just set it for the build required to deploy that particular version, so you don't accidentally leave the dry run mode enabled."))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("can-i-merge")
                .about("Checks if the specified pacticipant version is compatible with the configured main branch of each of the pacticipants with which it is integrated.")
                .arg(Arg::new("pacticipant")
                    .short('a')
                    .long("pacticipant")
                    .value_name("PACTICIPANT")
                    .required(true)
                    .num_args(0..=1)
                    .help("The pacticipant name. Use once for each pacticipant being checked."))
                .arg(Arg::new("version")
                    .short('e')
                    .long("version")
                    .value_name("VERSION")
                    .help("The pacticipant version. Must be entered after the --pacticipant that it relates to."))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "table"]))
                    .default_value("table")
                    .help("json or table"))
                .arg(Arg::new("retry-while-unknown")
                    .long("retry-while-unknown")
                    .value_name("TIMES")
                    .default_value("0")
                    .help("The number of times to retry while there is an unknown verification result (ie. the provider verification is likely still running)"))
                .arg(Arg::new("retry-interval")
                    .long("retry-interval")
                    .value_name("SECONDS")
                    .default_value("10")
                    .help("The time between retries in seconds. Use in conjuction with --retry-while-unknown"))
                .arg(Arg::new("dry-run")
                    .long("dry-run")
                    .help("When dry-run is enabled, always exit process with a success code. Can also be enabled by setting the environment variable PACT_BROKER_CAN_I_MERGE_DRY_RUN=true. This mode is useful when setting up your CI/CD pipeline for the first time, or in a 'break glass' situation where you need to knowingly deploy what Pact considers a breaking change. For the second scenario, it is recommended to use the environment variable and just set it for the build required to deploy that particular version, so you don't accidentally leave the dry run mode enabled."))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("create-or-update-pacticipant")
                .about("Create or update pacticipant by name")
                .arg(Arg::new("name")
                    .long("name")
                    .value_name("NAME")
                    .required(true)
                    .help("Pacticipant name"))
                .arg(Arg::new("display-name")
                    .long("display-name")
                    .value_name("DISPLAY_NAME")
                    .help("Display name"))
                .arg(Arg::new("main-branch")
                    .long("main-branch")
                    .value_name("MAIN_BRANCH")
                    .help("The main development branch of the pacticipant repository"))
                .arg(Arg::new("repository-url")
                    .long("repository-url")
                    .value_name("REPOSITORY_URL")
                    .help("The repository URL of the pacticipant"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))
    
                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("describe-pacticipant")
                .about("Describe a pacticipant")
                .arg(Arg::new("name")
                    .long("name")
                    .value_name("NAME")
                    .required(true)
                    .help("Pacticipant name"))
                .arg(Arg::new("output")
                    .short('o')
                    .long("output")
                    .value_name("OUTPUT")
                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                    .default_value("text")
                    .help("json or text"))
                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_name("BROKER_BASE_URL")
                    .required(true)
                    .help("The base URL of the Pact Broker"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("list-pacticipants")
                        .about("List pacticipants")
                        .arg(Arg::new("broker-base-url")
                            .short('b')
                            .long("broker-base-url")
                            .value_name("BROKER_BASE_URL")
                            .required(true)
                            .help("The base URL of the Pact Broker"))
                        .arg(Arg::new("output")
                            .short('o')
                            .long("output")
                            .value_name("OUTPUT")
                            .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                            .default_value("text")
                            .help("json or text"))
                        .arg(Arg::new("broker-username")
                            .short('u')
                            .long("broker-username")
                            .num_args(1)
                            .help("Pact Broker basic auth username")
                            .value_name("BROKER_USERNAME"))
                        .arg(Arg::new("broker-password")
                            .short('p')
                            .long("broker-password")
                            .num_args(1)
                            .help("Pact Broker basic auth password")
                            .value_name("BROKER_PASSWORD"))
                        .arg(Arg::new("broker-token")
                            .short('k')
                            .long("broker-token")
                            .num_args(1)
                            .help("Pact Broker bearer token")
                            .value_name("BROKER_TOKEN"))
                        .arg(Arg::new("verbose")
                            .short('v')
                            .long("verbose")
                            .help("Verbose output.")))
            .subcommand(Command::new("create-webhook")
                .about("Create a webhook")
                .arg(Arg::new("url")
                    .value_name("URL")
                    .required(true)
                    .help("Webhook URL"))
                .arg(Arg::new("request")
                    .short('X')
                    .long("request")
                    .value_name("METHOD")
                    .help("Webhook HTTP method"))
                .arg(Arg::new("header")
                    .short('H')
                    .long("header")
                    .value_name("one two three")
                    .num_args(0..=1)
                    .help("Webhook Header"))
                .arg(Arg::new("data")
                    .short('d')
                    .long("data")
                    .value_name("DATA")
                    .help("Webhook payload"))
                .arg(Arg::new("user")
                    .short('u')
                    .long("user")
                    .value_name("USER")
                    .help("Webhook basic auth username and password eg. username:password"))
                .arg(Arg::new("consumer")
                    .long("consumer")
                    .value_name("CONSUMER")
                    .help("Consumer name"))
                .arg(Arg::new("consumer-label")
                    .long("consumer-label")
                    .value_name("CONSUMER_LABEL")
                    .help("Consumer label, mutually exclusive with consumer name"))
                .arg(Arg::new("provider")
                    .long("provider")
                    .value_name("PROVIDER")
                    .help("Provider name"))
                .arg(Arg::new("provider-label")
                    .long("provider-label")
                    .value_name("PROVIDER_LABEL")
                    .help("Provider label, mutually exclusive with provider name"))
                .arg(Arg::new("description")
                    .long("description")
                    .value_name("DESCRIPTION")
                    .help("Webhook description"))
                .arg(Arg::new("contract-content-changed")
                    .long("contract-content-changed")
                    .help("Trigger this webhook when the pact content changes"))
                .arg(Arg::new("contract-published")
                    .long("contract-published")
                    .help("Trigger this webhook when a pact is published"))
                .arg(Arg::new("provider-verification-published")
                    .long("provider-verification-published")
                    .help("Trigger this webhook when a provider verification result is published"))
                .arg(Arg::new("provider-verification-failed")
                    .long("provider-verification-failed")
                    .help("Trigger this webhook when a failed provider verification result is published"))
                .arg(Arg::new("provider-verification-succeeded")
                    .long("provider-verification-succeeded")
                    .help("Trigger this webhook when a successful provider verification result is published"))
                .arg(Arg::new("contract-requiring-verification-published")
                    .long("contract-requiring-verification-published")
                    .help("Trigger this webhook when a contract is published that requires verification"))
                .arg(Arg::new("team-uuid")
                    .long("team-uuid")
                    .value_name("UUID")
                    .help("UUID of the PactFlow team to which the webhook should be assigned (PactFlow only)"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                    .required(true)
                    .help("The base URL of the Pact Broker")
                    .value_name("PACT_BROKER_BASE_URL")
                    .env("PACT_BROKER_BASE_URL"))
                .arg(Arg::new("broker-username")
                    .short('u')
                    .long("broker-username")
                    .num_args(1)
                    .help("Pact Broker basic auth username")
                    .value_name("PACT_BROKER_USERNAME")
                    .env("PACT_BROKER_USERNAME"))
                .arg(Arg::new("broker-password")
                    .short('p')
                    .long("broker-password")
                    .num_args(1)
                    .help("Pact Broker basic auth password")
                    .value_name("PACT_BROKER_PASSWORD")
                    .env("PACT_BROKER_PASSWORD"))
                .arg(Arg::new("broker-token")
                    .short('k')
                    .long("broker-token")
                    .num_args(1)
                    .help("Pact Broker bearer token")
                    .value_name("PACT_BROKER_TOKEN")
                    .env("PACT_BROKER_TOKEN"))
                .arg(Arg::new("verbose")
                    .short('v')
                    .long("verbose")
                    .help("Verbose output.")))
            .subcommand(Command::new("create-or-update-webhook")
                .about("Create or update a webhook")
                .arg(Arg::new("url")
                    .value_name("URL")
                    .required(true)
                    .help("Webhook URL"))
                .arg(Arg::new("uuid")
                    .long("uuid")
                    .value_name("UUID")
                    .required(true)
                    .help("Specify the uuid for the webhook"))
                .arg(Arg::new("request")
                    .short('X')
                    .long("request")
                    .value_name("METHOD")
                    .help("Webhook HTTP method"))
                .arg(Arg::new("header")
                    .short('H')
                    .long("header")
                    .value_name("one two three")
                    .num_args(0..=1)
                    .help("Webhook Header"))
                .arg(Arg::new("data")
                    .short('d')
                    .long("data")
                    .value_name("DATA")
                    .help("Webhook payload"))
                .arg(Arg::new("user")
                    .short('u')
                    .long("user")
                    .value_name("USER")
                    .help("Webhook basic auth username and password eg. username:password"))
                .arg(Arg::new("consumer")
                    .long("consumer")
                    .value_name("CONSUMER")
                    .help("Consumer name"))
                .arg(Arg::new("consumer-label")
                    .long("consumer-label")
                    .value_name("CONSUMER_LABEL")
                    .help("Consumer label, mutually exclusive with consumer name"))
                .arg(Arg::new("provider")
                    .long("provider")
                    .value_name("PROVIDER")
                    .help("Provider name"))
                .arg(Arg::new("provider-label")
                    .long("provider-label")
                    .value_name("PROVIDER_LABEL")
                    .help("Provider label, mutually exclusive with provider name"))
                .arg(Arg::new("description")
                    .long("description")
                    .value_name("DESCRIPTION")
                    .help("Webhook description"))
                .arg(Arg::new("contract-content-changed")
                    .long("contract-content-changed")
                    .help("Trigger this webhook when the pact content changes"))
                .arg(Arg::new("contract-published")
                    .long("contract-published")
                    .help("Trigger this webhook when a pact is published"))
                .arg(Arg::new("provider-verification-published")
                    .long("provider-verification-published")
                    .help("Trigger this webhook when a provider verification result is published"))
                .arg(Arg::new("provider-verification-failed")
                    .long("provider-verification-failed")
                    .help("Trigger this webhook when a failed provider verification result is published"))
                .arg(Arg::new("provider-verification-succeeded")
                    .long("provider-verification-succeeded")
                    .help("Trigger this webhook when a successful provider verification result is published"))
                .arg(Arg::new("contract-requiring-verification-published")
                    .long("contract-requiring-verification-published")
                    .help("Trigger this webhook when a contract is published that requires verification"))
                .arg(Arg::new("team-uuid")
                    .long("team-uuid")
                    .value_name("UUID")
                    .help("UUID of the PactFlow team to which the webhook should be assigned (PactFlow only)"))

                .arg(Arg::new("broker-base-url")
                    .short('b')
                    .long("broker-base-url")
                            .value_parser(clap::builder::NonEmptyStringValueParser::new())
                            .required(true)
                            .help("The base URL of the Pact Broker")
                            .value_name("PACT_BROKER_BASE_URL")
                            .env("PACT_BROKER_BASE_URL"))
                        .arg(Arg::new("broker-username")
                            .short('u')
                            .long("broker-username")
                            .num_args(1)
                            .help("Pact Broker basic auth username")
                            .value_name("PACT_BROKER_USERNAME")
                            .env("PACT_BROKER_USERNAME"))
                        .arg(Arg::new("broker-password")
                            .short('p')
                            .long("broker-password")
                            .num_args(1)
                            .help("Pact Broker basic auth password")
                            .value_name("PACT_BROKER_PASSWORD")
                            .env("PACT_BROKER_PASSWORD"))
                        .arg(Arg::new("broker-token")
                            .short('k')
                            .long("broker-token")
                            .num_args(1)
                            .help("Pact Broker bearer token")
                            .value_name("PACT_BROKER_TOKEN")
                            .env("PACT_BROKER_TOKEN"))
                        .arg(Arg::new("verbose")
                            .short('v')
                            .long("verbose")
                            .help("Verbose output.")))
                    .subcommand(Command::new("test-webhook")
                                .about("Test a webhook")
                                .arg(Arg::new("uuid")
                                    .long("uuid")
                                    .value_name("UUID")
                                    .num_args(1)
                                    .required(true)
                                    .help("Specify the uuid for the webhook"))
                                .arg(Arg::new("broker-base-url")
                                    .short('b')
                                    .long("broker-base-url")
                                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                                    .required(true)
                                    .num_args(1)
                                    .help("The base URL of the Pact Broker")
                                    .value_name("PACT_BROKER_BASE_URL")
                                    .env("PACT_BROKER_BASE_URL"))
                                .arg(Arg::new("broker-username")
                                    .short('u')
                                    .long("broker-username")
                                    .num_args(1)
                                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                                    .help("Pact Broker basic auth username")
                                    .value_name("PACT_BROKER_USERNAME")
                                    .env("PACT_BROKER_USERNAME"))
                                .arg(Arg::new("broker-password")
                                    .short('p')
                                    .long("broker-password")
                                    .num_args(1)
                                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                                    .help("Pact Broker basic auth password")
                                    .value_name("PACT_BROKER_PASSWORD")
                                    .env("PACT_BROKER_PASSWORD"))
                                .arg(Arg::new("broker-token")
                                    .short('k')
                                    .long("broker-token")
                                    .num_args(1)
                                    .value_parser(clap::builder::NonEmptyStringValueParser::new())
                                    .help("Pact Broker bearer token")
                                    .value_name("PACT_BROKER_TOKEN")
                                    .env("PACT_BROKER_TOKEN"))
                                .arg(Arg::new("verbose")
                                    .short('v')
                                    .long("verbose")
                                    .help("Verbose output.")))
                    .subcommand(Command::new("delete-branch")
                                .about("Deletes a pacticipant branch. Does not delete the versions or pacts/verifications associated with the branch, but does make the pacts inaccessible for verification via consumer versions selectors or WIP pacts.")
                                .arg(Arg::new("branch")
                                    .long("--branch")
                                    .value_name("BRANCH")
                                    .required(true)
                                    .help("The pacticipant branch name"))
                                .arg(Arg::new("pacticipant")
                                    .short('a')
                                    .long("--pacticipant")
                                    .value_name("PACTICIPANT")
                                    .required(true)
                                    .help("The name of the pacticipant that the branch belongs to"))
                                .arg(Arg::new("broker-base-url")
                                    .short('b')
                                    .long("--broker-base-url")
                                    .value_name("BROKER_BASE_URL")
                                    .required(true)
                                    .help("The base URL of the Pact Broker"))
                                .arg(Arg::new("broker-username")
                                    .short('u')
                                    .long("--broker-username")
                                    .value_name("BROKER_USERNAME")
                                    .help("Pact Broker basic auth username"))
                                .arg(Arg::new("broker-password")
                                    .short('p')
                                    .long("--broker-password")
                                    .value_name("BROKER_PASSWORD")
                                    .help("Pact Broker basic auth password"))
                                .arg(Arg::new("broker-token")
                                    .short('k')
                                    .long("--broker-token")
                                    .value_name("BROKER_TOKEN")
                                    .help("Pact Broker bearer token"))
                                .arg(Arg::new("verbose")
                                    .short('v')
                                    .long("--verbose")
                                    .help("Verbose output.")))
                    .subcommand(Command::new("create-version-tag")
                                .about("Add a tag to a pacticipant version")
                                .arg(Arg::new("pacticipant")
                                    .short('a')
                                    .long("--pacticipant")
                                    .value_name("PACTICIPANT")
                                    .required(true)
                                    .help("The pacticipant name"))
                                .arg(Arg::new("version")
                                    .short('e')
                                    .long("--version")
                                    .value_name("VERSION")
                                    .required(true)
                                    .help("The pacticipant version"))
                                .arg(Arg::new("tag")
                                    .short('t')
                                    .long("--tag")
                                    .value_name("TAG")
                                    .num_args(0..=1)
                                    .help("Tag name for pacticipant version. Can be specified multiple times"))
                                .arg(Arg::new("auto-create-version")
                                    .long("--auto-create-version")
                                    .help("Automatically create the pacticipant version if it does not exist"))
                                .arg(Arg::new("tag-with-git-branch")
                                    .short('g')
                                    .long("--tag-with-git-branch")
                                    .help("Tag pacticipant version with the name of the current git branch")))
                    .subcommand(Command::new("describe-version")
                                .about("Describes a pacticipant version. If no version or tag is specified, the latest version is described.")
                                .arg(Arg::new("pacticipant")
                                    .short('a')
                                    .long("--pacticipant")
                                    .value_name("PACTICIPANT")
                                    .required(true)
                                    .help("The name of the pacticipant that the version belongs to"))
                                .arg(Arg::new("version")
                                    .short('e')
                                    .long("--version")
                                    .value_name("VERSION")
                                    .help("The pacticipant version number"))
                                .arg(Arg::new("latest")
                                    .short('l')
                                    .long("--latest")
                                    .value_name("TAG")
                                    .help("Describe the latest pacticipant version. Optionally specify a TAG to describe the latest version with the specified tag"))
                                .arg(Arg::new("output")
                                    .short('o')
                                    .long("--output")
                                    .value_name("OUTPUT")
                                    .default_value("table")
                                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "table", "id"]))
                                    .help("json or table or id")))
                    .subcommand(Command::new("create-or-update-version")
                                .about("Create or update pacticipant version by version number")
                                .arg(Arg::new("pacticipant")
                                    .short('a')
                                    .long("--pacticipant")
                                    .value_name("PACTICIPANT")
                                    .required(true)
                                    .help("The pacticipant name"))
                                .arg(Arg::new("version")
                                    .short('e')
                                    .long("--version")
                                    .value_name("VERSION")
                                    .required(true)
                                    .help("The pacticipant version number"))
                                .arg(Arg::new("branch")
                                    .long("--branch")
                                    .value_name("BRANCH")
                                    .help("The repository branch name"))
                                .arg(Arg::new("tag")
                                    .short('t')
                                    .long("--tag")
                                    .value_name("TAG")
                                    .num_args(0..=1)
                                    .help("Tag name for pacticipant version. Can be specified multiple times"))
                                .arg(Arg::new("output")
                                    .short('o')
                                    .long("--output")
                                    .value_name("OUTPUT")
                                    .default_value("text")
                                    .value_parser(clap::builder::PossibleValuesParser::new(&["json", "text"]))
                                    .help("json or text")))
                    .subcommand(Command::new("generate-uuid")
                                .about("Generate a UUID for use when calling create-or-update-webhook"))
     
                    )
        .subcommand(Command::new("pactflow") 
                .subcommand(Command::new("publish-provider-contract")
                                .about("Publish provider contract to PactFlow")
                                .arg(Arg::new("contract-file")
                                    .num_args(1)
                                    .value_name("CONTRACT_FILE")
                                    .required(true)
                                    .help("The contract file(s)"))
                                .arg(Arg::new("provider")
                                    .long("provider")
                                    .value_name("PROVIDER")
                                    .help("The provider name"))
                                .arg(Arg::new("provider-app-version")
                                    .short('a')
                                    .long("provider-app-version")
                                    .value_name("PROVIDER_APP_VERSION")
                                    .required(true)
                                    .help("The provider application version"))
                                .arg(Arg::new("broker-base-url")
                                    .short('b')
                                    .long("broker-base-url")
                                    .value_name("BROKER_BASE_URL")
                                    .required(true)
                                    .help("The base URL of the Pact Broker"))
                                .arg(Arg::new("branch")
                                    .short('h')
                                    .long("branch")
                                    .value_name("BRANCH")
                                    .help("Repository branch of the provider version"))
                                .arg(Arg::new("tag")
                                    .short('t')
                                    .long("tag")
                                    .value_name("TAG")
                                    .num_args(0..=1)
                                    .help("Tag name for provider version. Can be specified multiple times."))
                                .arg(Arg::new("specification")
                                    .long("specification")
                                    .value_name("SPECIFICATION")
                                    .default_value("oas")
                                    .help("The contract specification"))
                                .arg(Arg::new("content-type")
                                    .long("content-type")
                                    .value_name("CONTENT_TYPE")
                                    .help("The content type. eg. application/yml"))
                                .arg(Arg::new("verification-success")
                                    .long("verification-success")
                                    .help("Whether or not the self verification passed successfully."))
                                .arg(Arg::new("verification-exit-code")
                                    .long("verification-exit-code")
                                    .value_name("N")
                                    .help("The exit code of the verification process. Can be used instead of --verification-success|--no-verification-success for a simpler build script."))
                                .arg(Arg::new("verification-results")
                                    .long("verification-results")
                                    .value_name("VERIFICATION_RESULTS")
                                    .help("The path to the file containing the output from the verification process"))
                                .arg(Arg::new("verification-results-content-type")
                                    .long("verification-results-content-type")
                                    .value_name("VERIFICATION_RESULTS_CONTENT_TYPE")
                                    .help("The content type of the verification output eg. text/plain, application/yaml"))
                                .arg(Arg::new("verification-results-format")
                                    .long("verification-results-format")
                                    .value_name("VERIFICATION_RESULTS_FORMAT")
                                    .help("The format of the verification output eg. junit, text"))
                                .arg(Arg::new("verifier")
                                    .long("verifier")
                                    .value_name("VERIFIER")
                                    .help("The tool used to verify the provider contract"))
                                .arg(Arg::new("verifier-version")
                                    .long("verifier-version")
                                    .value_name("VERIFIER_VERSION")
                                    .help("The version of the tool used to verify the provider contract"))
                                .arg(Arg::new("build-url")
                                    .long("build-url")
                                    .value_name("BUILD_URL")
                                    .help("The build URL that created the provider contract"))
                                .arg(Arg::new("output")
                                    .short('o')
                                    .long("output")
                                    .value_name("OUTPUT")
                                    .default_value("text")
                                    .help("json or text"))
                                .arg(Arg::new("broker-username")
                                    .short('u')
                                    .long("broker-username")
                                    .value_name("BROKER_USERNAME")
                                    .help("Pact Broker basic auth username"))
                                .arg(Arg::new("broker-password")
                                    .short('p')
                                    .long("broker-password")
                                    .value_name("BROKER_PASSWORD")
                                    .help("Pact Broker basic auth password"))
                                .arg(Arg::new("broker-token")
                                    .short('k')
                                    .long("broker-token")
                                    .value_name("BROKER_TOKEN")
                                    .help("Pact Broker bearer token"))
                                .arg(Arg::new("verbose")
                                    .short('v')
                                    .long("verbose")
                                    .help("Verbose output."))))
        .subcommand(Command::new("completions") 
            .about("Generates completion scripts for your shell")
            .arg(Arg::new("shell")
                .value_name("SHELL")
                .required(true)
                .value_parser(clap::builder::PossibleValuesParser::new(&["bash", "fish", "zsh", "powershell", "elvish"]))
                .help("The shell to generate the script for"))
            .arg(Arg::new("dir")
                .short('d')
                .long("dir")
                .value_name("DIRECTORY")
                .required(false)
                .default_value(".")
                .num_args(1)
                .value_parser(clap::builder::NonEmptyStringValueParser::new())
                .help("The directory to write the shell completions to, default is the current directory"))
)
}
